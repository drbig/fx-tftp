#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'logger'
require 'optparse'
require 'tftp'

# Defaults
config = { :port => 69, :address => '0.0.0.0', :loglevel => Logger::WARN }

op = OptionParser.new do |o|
  o.banner = "Usage: #{$PROGRAM_NAME} [OPTIONS] DIR"
  o.on '-V', '--version', 'Show version and exit' do
    puts "fx-tftpd v#{TFTP::VERSION} Copyright (c) 2015, Piotr S. Staszewski"
    exit
  end
  o.on '-a', '--address ADDRESS', String,
    'Address to listen on (default: 0.0.0.0)' do |address|
    config[:address] = address
  end
  o.on '-p', '--port PORT', Integer,
    'Port to listen on (default: 69)' do |port|
    abort 'Invalid port' if port < 1 || port > 65535
    config[:port] = port
  end
  o.on '-v', '--verbose', 'Enable verbose output' do
    config[:loglevel] = Logger::INFO
  end
end

config[:path] = op.parse!.first
abort 'Last argument must be a directory' unless File.directory? config[:path]

if config[:port] < 1024 && !Process.euid.zero?
  abort 'Please run tftpd as root via sudo!'
end

log = Logger.new(STDOUT)
log.level = config[:loglevel]
log.formatter = lambda do |s, d, p, m|
  "#{d.strftime('%Y-%m-%d %H:%M:%S.%3N')} | #{s.ljust(5)} | #{m}\n"
end
config[:logger] = log

begin
  log.info "Serving from and to #{config[:path]}"
  srv = TFTP::Server::RWSimple.new(config[:path], config)
  srv.run!
rescue SignalException => e
  puts if e.is_a? Interrupt
  srv.stop
end

if Thread.list.length > 1
  log.info 'Waiting for outstanding connections'
  Thread.stop
end
